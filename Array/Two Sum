class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        //Brute Force solution O(n)
        // for(int i=0;i<nums.length-1;i++){
        //     for(int j=i+1;j<nums.length;j++){
        //             if(nums[i]+nums[j]==target)return new int[]{i,j};
        //     }
        // }
        // return new int[]{-1,-1};






        //Optimal O(nlogn) will not work in case of returning indexess
        // Arrays.sort(nums);
        // int i=0;
        // int j=nums.length-1;
        // while(i<j){
        //     if(nums[i]+nums[j]==target)return new int[]{i,j};
        //     else if(nums[i]+nums[j]<target)i++;
        //     else j--;
        // }
        // return new int[]{-1,-1};

        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(target-nums[i])){
                return new int[]{i,map.get(target-nums[i])};
            }
                map.put(nums[i],i);
            
        }
        return new int[]{-1,-1};
      


    }
}
